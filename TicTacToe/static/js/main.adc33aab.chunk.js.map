{"version":3,"sources":["components/clickableCell/ClickableCell.jsx","Helpers/Utilities.js","components/stats/Stats.jsx","components/customPopup/PopUp.jsx","Helpers/Constants.js","components/baseArea/BaseArea.jsx","App.js","serviceWorker.js","index.js"],"names":["ClickableCell","props","onCellClicked","bind","wasBoxFilled","this","boxesToFill","find","elem","cellId","undefined","onClick","className","style","playerFlag","border","onBoxClick","Component","checkResult","allMovesParam","playerParam","winningPatterns","playerMoves","reverse","filter","singleMove","map","push","sort","a","b","resultCalculated","patternItemExist","forEach","winningPattern","patternItem","toString","includes","Stats","src","alt","playerOneWins","ties","playerTwoWins","PopUp","closePopUp","id","display","isVisible","imageType","body","Constants","baseAreaCells","emojiGifTypes","Hurrah","GameTied","ChooseAnotherBox","GameRefreshed","initialState","filledBoxes","playerTurnFlag","isGameFinished","isGameTied","isPopUpVisible","popUpBodyText","popUpImage","BaseArea","state","boxClicked","undoMove","setGameDefaults","displayPopUp","backgroundColor","title","row","Array","isArray","baseRow","i","key","cellItem","CellItemId","bodyText","setState","allMoves","length","pop","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.adc33aab.chunk.js","sourcesContent":["import \"./ClickableCell.css\";\r\nimport React, {Component} from \"react\";\r\n\r\nexport default class ClickableCell extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.onCellClicked = this.onCellClicked.bind(this);\r\n    }\r\n\r\n    render(){\r\n        let boxesToSearch = this.props.boxesToFill ? this.props.boxesToFill : [];\r\n        let wasBoxFilled = boxesToSearch.find(elem => elem.cellId === this.props.cellId ? elem : undefined);\r\n        return (\r\n            <button onClick={this.onCellClicked} className=\"cell_layout\" style={wasBoxFilled !== undefined ? !wasBoxFilled.playerFlag ? {border: '2px solid #C1F215'} : {border: '2px solid #FFA500'} : {}}>\r\n                {wasBoxFilled !== undefined ? !wasBoxFilled.playerFlag ? \"X\" : \"O\" : \"\"}\r\n            </button>\r\n        );\r\n    }\r\n\r\n    onCellClicked(){\r\n        this.props.onBoxClick(this.props.cellId);\r\n    }\r\n}","export function checkResult(allMovesParam, playerParam, winningPatterns){\r\n    if(!allMovesParam || !winningPatterns){\r\n        return false;\r\n    }\r\n    let playerMoves = []\r\n    let allMoves = [...allMovesParam];\r\n    allMoves.reverse().filter(singleMove => singleMove.playerFlag === playerParam).map(singleMove => playerMoves.push(singleMove.cellId)); \r\n    playerMoves = playerMoves.sort((a, b) => a - b);\r\n    let resultCalculated = false;\r\n    let patternItemExist = true;\r\n    winningPatterns.forEach(winningPattern => {\r\n        winningPattern = winningPattern.sort((a, b) => a - b);\r\n        patternItemExist = true;\r\n        winningPattern.forEach(patternItem => {\r\n            if (!playerMoves.toString().includes(patternItem)) {\r\n                patternItemExist = false;\r\n                return;\r\n            }\r\n        });\r\n        if(patternItemExist){\r\n            resultCalculated = true;\r\n        }\r\n    });\r\n    return resultCalculated ? true : false\r\n}\r\n\r\n\r\nexport function generateTestData(numberOfObjectsRequired){\r\n    if(!numberOfObjectsRequired){\r\n        return [];\r\n    }\r\n    else {\r\n        let objectsArr = [];\r\n        for(let i = 0; i < numberOfObjectsRequired; i++) {\r\n            objectsArr.push({\r\n                cellId: 12,\r\n                playerFlag: true\r\n            });\r\n        }\r\n        return objectsArr;\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport './Stats.css';\r\n\r\nexport default class Stats extends Component {\r\n\r\n    render(){\r\n      return (\r\n        <div className=\"stats_body\">\r\n            <div>\r\n                <img className='avatar' src='/imgs/user1.png' alt='player img' /> \r\n                <p>Player One: <strong>{!this.props.playerOneWins ? 'X' : this.props.playerOneWins}</strong></p>\r\n            </div>\r\n            <div>\r\n                <img className='avatar' src=\"/imgs/controller.png\" alt='avatar'/> \r\n                <p>Ties: <strong>{!this.props.ties ? 'X' : this.props.ties}</strong></p>\r\n            </div>\r\n            <div>\r\n                <img className='avatar' src='/imgs/user1.png' alt='player img' /> \r\n                <p>Player Two: <strong>{!this.props.playerTwoWins ? 'X' : this.props.playerTwoWins}</strong></p>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport './PopUp.css';\r\n\r\nexport default class PopUp extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.closePopUp = this.closePopUp.bind(this);\r\n    }    \r\n\r\n    render(){\r\n      return (\r\n        <div className='popup_body' id='popup_container' style={{display: this.props.isVisible ? 'block' : 'none'}}>\r\n            <img className='expressionGifs' alt='Image expressions..' id='expression_image' src={this.props.imageType ? this.props.imageType : '/imgs/user1.png'}/>\r\n            <div>\r\n              {this.props.body}\r\n            </div>\r\n            <div>\r\n              <button className=\"btn_close\" onClick={this.closePopUp}>Close</button>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    closePopUp() {\r\n        this.props.closePopUp();\r\n    }\r\n}","export default class Constants {\r\n    static baseAreaCells = [\r\n        [11, 21, 31], [12, 22, 32], [13, 23, 33]\r\n    ];\r\n\r\n    static winningPatterns = [\r\n        [11, 21, 31], [12, 22, 32], [13, 23, 33],\r\n        [11, 12, 13], [21, 22, 23], [31, 32, 33],\r\n        [11, 22, 33], [31, 22, 13]\r\n    ];\r\n\r\n    static emojiGifTypes = {\r\n        Hurrah: \"/imgs/hurrah.gif\",\r\n        GameTied: \"/imgs/tied.gif\",\r\n        ChooseAnotherBox: \"/imgs/thinking.gif\",\r\n        GameRefreshed: \"/imgs/Whistle.gif\"\r\n    }\r\n}","import \"./BaseArea.css\";\r\nimport React, {Component} from \"react\";\r\nimport ClickableCell from \"../clickableCell/ClickableCell\";\r\nimport { checkResult } from \"../../Helpers/Utilities\";\r\nimport Stats from \"../stats/Stats\";\r\nimport PopUp from \"../customPopup/PopUp\";\r\nimport Constants from '../../Helpers/Constants';\r\n\r\nconst initialState = { \r\n    filledBoxes: [],\r\n    playerTurnFlag: false, \r\n    isGameFinished: false,\r\n    isGameTied: false,\r\n    isPopUpVisible: false,\r\n    popUpBodyText: \"\",\r\n    popUpImage: \"\",\r\n    playerOneWins: 0, \r\n    playerTwoWins: 0, \r\n    ties: 0\r\n}\r\n\r\nexport default class BaseArea extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = initialState;\r\n        this.boxClicked = this.boxClicked.bind(this);\r\n        this.undoMove = this.undoMove.bind(this);\r\n        this.setGameDefaults = this.setGameDefaults.bind(this);\r\n        this.closePopUp = this.closePopUp.bind(this);\r\n        this.displayPopUp = this.displayPopUp.bind(this);\r\n    }\r\n\r\n    render() {\r\n        let baseAreaCells = this.props.baseAreaCells ? this.props.baseAreaCells : [];\r\n        return (\r\n            <div className=\"base\" style={!this.state.playerTurnFlag ? {backgroundColor: '#f8fde7'} : {backgroundColor: '#ffedcc'}}>\r\n                <div className=\"stack_side_by_side\">          \r\n                    <img src=\"/imgs/refresh.png\" alt=\"avatar\" id=\"undoMoveId\" className=\"avatar\" title=\"Undo move\" onClick={this.undoMove}/>\r\n                    <img src=\"/imgs/restart.png\" alt=\"avatar\" id=\"gameDefaultsId\" className=\"avatar\" title=\"Start Over\" onClick={this.setGameDefaults}/>\r\n                </div>\r\n                <br/>\r\n                <PopUp imageType={this.state.popUpImage} isVisible={this.state.isPopUpVisible} closePopUp={this.closePopUp} body={this.state.popUpBodyText}/>\r\n                <h3>\r\n                    {!this.state.isGameFinished ? (!this.state.playerTurnFlag ? \"Player 1 to play..\" : \"Player 2 to play..\")  : \"Game Over!\"}\r\n                </h3>\r\n                {\r\n                    baseAreaCells.filter(row => row !== undefined && Array.isArray(row)).map((baseRow, i) => \r\n                        <span className=\"stack_side_by_side\" key={i}>  \r\n                            {\r\n                                baseRow.filter(cellItem => cellItem !==undefined).map(\r\n                                    CellItemId => <ClickableCell boxesToFill={this.state.filledBoxes} playerFlag={this.state.playerTurnFlag} onBoxClick={this.boxClicked} key={CellItemId} cellId={CellItemId}/>\r\n                                )\r\n                            }\r\n                        </span>\r\n                    )\r\n                }\r\n                <Stats playerOneWins={this.state.playerOneWins} playerTwoWins={this.state.playerTwoWins} ties={this.state.ties}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    displayPopUp(bodyText, popUpImage) {\r\n        this.setState({\r\n            isPopUpVisible: true,\r\n            popUpImage: popUpImage,\r\n            popUpBodyText: bodyText\r\n        });\r\n    }\r\n\r\n    closePopUp() {\r\n        this.setState({\r\n          isPopUpVisible: false\r\n        });\r\n    }\r\n\r\n    setGameDefaults() {\r\n        this.setState({\r\n            filledBoxes: [],\r\n            playerTurnFlag: false, \r\n            isGameFinished: false,\r\n            isGameTied: false,\r\n            isPopUpVisible: false,\r\n            popUpBodyText: \"\",\r\n            popUpImage: \"\",\r\n        });\r\n\r\n        this.setState({\r\n            isPopUpVisible: true,\r\n            popUpImage: Constants.emojiGifTypes.GameRefreshed,\r\n            popUpBodyText: \"Game's refreshed!\"\r\n        });\r\n    }\r\n\r\n    undoMove(){\r\n        if(!this.state.isPopUpVisible && !this.state.isGameFinished && !this.state.isGameTied){\r\n            let allMoves = this.state.filledBoxes;\r\n            if(allMoves.length > 0){\r\n              allMoves.pop();\r\n              this.setState({\r\n                playerTurnFlag: !this.state.playerTurnFlag,\r\n                filledBoxes: allMoves\r\n              });\r\n            }\r\n        }\r\n    }\r\n\r\n    boxClicked(cellId) {\r\n        let filledBoxes = this.state.filledBoxes;\r\n        if (this.state.isGameFinished) {\r\n            this.displayPopUp(\"Game over. \"+ (this.state.playerTurnFlag ? \"Player 2\" : \"Player 1\") + \" won! Want a rematch? Click on StartOver button\", Constants.emojiGifTypes.GameRefreshed);\r\n            return false;\r\n        }\r\n        else if (this.state.isGameTied) {\r\n            this.displayPopUp(\"Game's tied! Want a rematch? Click on StartOver button\", Constants.emojiGifTypes.GameTied);\r\n            return false;\r\n        }\r\n        else if(filledBoxes.find(a => a.cellId === cellId)){\r\n            this.displayPopUp(\"This box is already filled, pick another one!\", Constants.emojiGifTypes.ChooseAnotherBox);\r\n            return false;\r\n        }\r\n        else {\r\n            filledBoxes.push({\r\n                cellId: cellId,\r\n                playerFlag: this.state.playerTurnFlag\r\n            });\r\n            this.setState({\r\n                filledBoxes: filledBoxes,\r\n                isGameFinished: checkResult(this.state.filledBoxes, this.state.playerTurnFlag, this.props.winningPatterns)\r\n              }, () => {\r\n                if(this.state.isGameFinished) {\r\n                    this.displayPopUp(\"Hurraah.. \"+ (this.state.playerTurnFlag ? \"Player 2\" : \"Player 1\") + \" won!!\", Constants.emojiGifTypes.Hurrah);\r\n                    this.setState({\r\n                        playerOneWins: !this.state.playerTurnFlag ? (this.state.playerOneWins + 1) : this.state.playerOneWins, \r\n                        playerTwoWins: this.state.playerTurnFlag ? (this.state.playerTwoWins + 1) : this.state.playerTwoWins \r\n                    });\r\n                }\r\n                else {\r\n                    if(this.state.filledBoxes.length === 9) {\r\n                        this.displayPopUp(\"Game's tied! Want a rematch? Click on StartOver button\", Constants.emojiGifTypes.GameTied);\r\n                        this.setState({\r\n\t\t\t\t\t\t\tisGameTied: true,\r\n\t\t\t\t\t\t\tties: this.state.ties + 1\r\n\t\t\t\t\t\t});\r\n                    }\r\n                    this.setState({\r\n                      playerTurnFlag: !this.state.playerTurnFlag,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport BaseArea from './components/baseArea/BaseArea';\nimport Constants from './Helpers/Constants';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BaseArea baseAreaCells={Constants.baseAreaCells} winningPatterns={Constants.winningPatterns}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}